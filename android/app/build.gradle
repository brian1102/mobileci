buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    // These docs use an open ended version so that our plugin
    // can be updated quickly in response to Android tooling updates

    // We recommend changing it to the latest version from our changelog:
    // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
    classpath 'io.fabric.tools:gradle:1.+'
  }
}

apply plugin: "com.android.application"


apply plugin: 'io.fabric'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}


project.ext.envConfigFiles = [
    yojeedev: ".env.yojee.dev",
    yojeestaging: ".env.yojee.staging",
    yojeeprod: ".env.yojee.prod",
    scharffdemo: ".env.scharff.demo",
    scharffprod: ".env.scharff.prod",
    tasmandemo: ".env.tasman.demo",
    tasmanprod: ".env.tasman.prod",
    yojeedemo: ".env.yojee.demo",
    upsdemo: ".env.ups.demo",
    upsprod: ".env.ups.prod"
]
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def gitVersionName = { ->
    def process = "git describe --long --tags | sed 's/-.*//'".execute()
    return process.text.trim()
}

def gitVersionCode = { ->
    def process = "git rev-list --count HEAD".execute()
    return process.text.toInteger()
}

def fabricReleaseNotes = { ->
    def process = "git log -8 --pretty=%B".execute().text.split("\n").findAll { !it.contains("Merge") && it.trim() != "" }.collect{"- " + it}.join("\n")
    return process.trim()
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.3"
    dexOptions {
        jumboMode true
    }

    defaultConfig {
        applicationId "com.yojee.driverapp"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode gitVersionCode()
        versionName "${gitVersionName()}"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }

    signingConfigs {
        prod {
            keyAlias 'yojee'
            keyPassword '7xsz573xeStN'
            storeFile file('keys/yojee.jks')
            storePassword '7xsz573xeStN'
        }
    }

    buildTypes {
        release {
            // multiDexKeepFile file('multidex-config.txt')
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.prod
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    productFlavors {
        yojeeDev {
            minSdkVersion 16
            applicationId 'com.yojee.driverapp.dev'
            targetSdkVersion 25
            resValue "string", "app_name", "InternalDriveYojee"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
            signingConfig signingConfigs.prod
        }
        yojeeDemo {
            minSdkVersion 16
            applicationId 'com.yojee.driverapp'
            targetSdkVersion 25
            resValue "string", "app_name", "YojeeDriveDemo"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
            signingConfig signingConfigs.prod
        }
        yojeeProd {
            minSdkVersion 16
            applicationId 'com.yojee.driverapp'
            targetSdkVersion 25
            resValue "string", "app_name", "Drive Yojee V2"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
            signingConfig signingConfigs.prod
        }
        scharffDemo {
            minSdkVersion 16
            applicationId 'com.yojee.scharff'
            targetSdkVersion 25
            resValue "string", "app_name", "ScharffDriveSandbox"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
        }
        scharffProd {
            minSdkVersion 16
            applicationId 'com.yojee.scharff'
            targetSdkVersion 25
            resValue "string", "app_name", "ScharffDrive"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
            signingConfig signingConfigs.prod
        }
        tasmanDemo {
            minSdkVersion 16
            applicationId 'com.yojee.tasman'
            targetSdkVersion 25
            resValue "string", "app_name", "TasmanSandbox"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
            signingConfig signingConfigs.prod
        }
        tasmanProd {
            minSdkVersion 16
            applicationId 'com.yojee.tasman'
            targetSdkVersion 25
            resValue "string", "app_name", "TasmanDrive"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
            signingConfig signingConfigs.prod
        }
        upsDemo {
            minSdkVersion 16
            applicationId 'com.yojee.ups'
            targetSdkVersion 25
            resValue "string", "app_name", "UPSSandbox"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
            signingConfig signingConfigs.prod
        }
        upsProd {
            minSdkVersion 16
            applicationId 'com.yojee.ups'
            targetSdkVersion 25
            resValue "string", "app_name", "UPSDrive"
            resValue "string", "build_config_package", "com.yojee.driverapp" // build config package: to resolve the react native config error
            signingConfig signingConfigs.prod
        }
        
    }

    packagingOptions {           
      exclude 'META-INF/DEPENDENCIES'      
      exclude 'META-INF/NOTICE'         
      exclude 'META-INF/LICENSE'      
      exclude 'META-INF/LICENSE.txt'    
      exclude 'META-INF/NOTICE.txt' 
      exclude 'META-INF/ECLIPSE_.SF'
      exclude 'META-INF/ECLIPSE_.RSA'
    }    
}

dependencies {
    compile project(':react-native-config')
    compile project(':react-native-config')
    compile project(':react-native-code-push')
    compile project(':react-native-version-number')
    compile project(':react-native-vector-icons')
    compile project(':react-native-svg')
    compile project(':react-native-sound')
    compile project(':react-native-signature-capture')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-image-resizer')
    compile project(':react-native-image-picker')
    compile project(':react-native-i18n')
    compile project(':react-native-fingerprint-scanner')
    compile project(':react-native-fetch-blob')
    compile project(':react-native-fcm')
    compile project(':react-native-cardview')
    compile project(':react-native-camera')
    compile project(':react-native-android-settings-library')
    compile project(':react-native-android-location-services-dialog-box')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-maps')

    compile (project(':mobicomkitui')) {
        exclude group: "com.google.firebase"
    }
    compile (project(':react-native-fcm')){
        exclude group: "com.google.firebase"
    }
    
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.4.0"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile ("com.google.android.gms:play-services-base:10.0.1") {
        force = true;
    }
    compile ("com.google.android.gms:play-services-maps:10.0.1") {
        force = true;
    }
    compile ("com.google.android.gms:play-services-gcm:10.0.1") {
        force = true;
    }
    compile ('com.google.firebase:firebase-core:10.0.1') {
        force = true;
    }
    compile ('com.google.firebase:firebase-messaging:10.0.1') {
        force = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true;
    }
    compile 'com.android.support:multidex:1.0.1'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: "com.google.gms.google-services"